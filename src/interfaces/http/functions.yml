createUsers:
  handler: src/interfaces/http/createUsers/index.main
  events:
    - http:
        path: ${self:provider.stage}/users
        method: post
        authorizer: aws_iam
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: [!GetAtt UsersTable.Arn, !Join ['/', [!GetAtt UsersTable.Arn, index/*]]]
updateUsers:
  handler: src/interfaces/http/updateUsers/index.main
  events:
    - http:
        path: ${self:provider.stage}/users
        method: put
        authorizer: aws_iam
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: [!GetAtt UsersTable.Arn, !Join ['/', [!GetAtt UsersTable.Arn, index/*]]]
deleteUsers:
  handler: src/interfaces/http/deleteUsers/index.main
  events:
    - http:
        path: ${self:provider.stage}/users/{id}
        method: delete
        authorizer: aws_iam
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource: [!GetAtt UsersTable.Arn, !Join ['/', [!GetAtt UsersTable.Arn, index/*]]]
findUserByTenantId:
  handler: src/interfaces/http/findUserByTenantId/index.main
  events:
    - http:
        path: ${self:provider.stage}/users/{id}
        method: get
        authorizer: aws_iam
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
      Resource: [!GetAtt UsersTable.Arn, !Join ['/', [!GetAtt UsersTable.Arn, index/*]]]
receiveStripeEvents:
  handler: src/interfaces/http/receiveStripeEvents/index.main
  events:
    - http:
        path: ${self:provider.stage}/users/stripe/events
        method: post
        cors: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: [!GetAtt UsersTable.Arn, !Join ['/', [!GetAtt UsersTable.Arn, index/*]]]
